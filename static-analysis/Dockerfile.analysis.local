# ------------------------------------------------------
# 1) Build stage: build the Go application
# ------------------------------------------------------
    FROM golang:1.22-alpine AS builder

    WORKDIR /app
    
    # Copy go.mod and go.sum
    COPY go.mod go.sum ./
    RUN go mod download
    
    # Copy source code
    COPY . .
    
    # Build the application
    RUN CGO_ENABLED=0 GOOS=linux go build -o crs-server ./cmd/server
    RUN CGO_ENABLED=0 GOOS=linux go build -o analysis-local ./cmd/local

    # ------------------------------------------------------
    # 2) Final stage: Ubuntu 22.04 w/ CodeQL and other deps
    # ------------------------------------------------------
    FROM ubuntu:24.04
    ARG DEBIAN_FRONTEND=noninteractive
    # Install basic packages
    RUN apt-get update && apt-get install -y \
        git \
        curl \
        vim \
        wget \
        tar \
        gzip \
        unzip \
        python3 \
        python3-venv \
        python3-pip \
        bash \
        jq \
        ca-certificates \
        tzdata \
        build-essential \
        openssh-client \
        cmake \
        ninja-build \
        z3 \
        libz3-dev \
        libxml2-dev \
        libcurl4-openssl-dev \
        liblzma-dev \
        tcl-dev \
        libssl-dev \
        libkrb5-dev \
        llvm \
        clang \
        && rm -rf /var/lib/apt/lists/*
    
    # ------------------------------------------------------
    # (Optional) Install clang-17/llvm-17
    # ------------------------------------------------------
    # If you specifically need clang-17 or llvm-17 (and they're not in the default 22.04 repos),
    # you can install them as follows. Remove if you don't need a specific version:
    RUN apt-get update && \
        apt-get install -y lsb-release wget software-properties-common gnupg && \
        wget https://apt.llvm.org/llvm.sh && \
        chmod +x llvm.sh && \
        ./llvm.sh 17 && \
        rm llvm.sh && \
        rm -rf /var/lib/apt/lists/*
    
    # ------------------------------------------------------
    # Install CodeQL
    # ------------------------------------------------------
    RUN mkdir -p /opt/codeql
    WORKDIR /opt/codeql
    RUN curl -L https://github.com/github/codeql-action/releases/download/codeql-bundle-v2.20.7/codeql-bundle-linux64.tar.gz \
        | tar -xz --strip-components=1 -C /opt/codeql
    
    # Make CodeQL easily accessible on PATH
    ENV PATH="/opt/codeql/:${PATH}"
    
    # ------------------------------------------------------
    # Create and activate Python virtual environment
    # ------------------------------------------------------
    RUN python3 -m venv /tmp/crs_venv
    
    # Install Python packages in the virtualenv
    RUN /bin/bash -c "source /tmp/crs_venv/bin/activate && \
        pip install --no-cache-dir litellm && \
        pip install --no-cache-dir tiktoken python-dotenv pyyaml openai anthropic && \
        pip install --no-cache-dir google-generativeai && \
        pip install --no-cache-dir clang==18.1.8 && \
        pip install --no-cache-dir openlit"
    
    # Ensure the virtual environment is on PATH
    ENV PATH="/tmp/crs_venv/bin:${PATH}"
    
    # ------------------------------------------------------
    # Copy entrypoint-local, .env, and set up directories
    # ------------------------------------------------------
    WORKDIR /app
    COPY entrypoint-local.sh /app/entrypoint-local.sh
    RUN chmod +x /app/entrypoint-local.sh
    COPY .env /app/.env
    
    COPY ./integration-test /app/strategyx/jeff/integration-test
    RUN chmod -R 755 /app/strategyx

    # Set environment variables
    ENV GIN_MODE=release
    ENV CRS_TASK_DIR=/app/tasks
    ENV CRS_LOG_DIR=/app/logs
    
    # ------------------------------------------------------
    # Copy the Go binary from the builder stage
    # ------------------------------------------------------
    COPY --from=builder /app/crs-server /app/
    COPY --from=builder /app/analysis-local /app/

    # Create tasks/logs directories
    RUN mkdir -p /app/tasks /app/logs
    
    # ------------------------------------------------------
    # Build and copy SVF binaries
    # ------------------------------------------------------
    COPY SVF/build/bin/wpa /app/strategyx/jeff/wpa
    COPY SVF/build/bin/fundef-bc /app/strategyx/jeff/fundef-bc
    COPY SVF/build/lib/extapi.bc /usr/local/lib/extapi.bc
    COPY SVF/build/lib/extapi.bc /app/strategyx/jeff/extapi.bc

    COPY parse_callgraph.py /app/strategyx/jeff/parse_callgraph.py
    COPY parse_callgraph_full.py /app/strategyx/jeff/parse_callgraph_full.py

    COPY my-queries /app/strategyx/jeff/my-queries
    
    # 2) Add the Docker official GPG key & repository
RUN apt-get update && apt-get install -y wget
RUN mkdir -m 0755 -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
      | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    echo \
      "deb [arch=$(dpkg --print-architecture) \
       signed-by=/etc/apt/keyrings/docker.gpg] \
       https://download.docker.com/linux/ubuntu \
       $(lsb_release -cs) stable" \
      > /etc/apt/sources.list.d/docker.list

# 3) Install Docker itself (including dockerd)
RUN apt-get update && apt-get install -y \
    docker-ce \
    docker-ce-cli \
    containerd.io \
    docker-buildx-plugin \
    docker-compose-plugin \
    && rm -rf /var/lib/apt/lists/*


    # Expose the port
    EXPOSE 7082
    
    ENTRYPOINT ["/app/entrypoint-local.sh"]
    