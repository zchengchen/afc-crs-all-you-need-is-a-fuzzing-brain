{
    "vulnerabilities": [
      {
        "vulnerability_id": "com.code_intelligence.jazzer.sanitizers.FilePathTraversal",
        "patches": [
          {
            "patch_id": "PATCH-001",
            "changes": "diff --git a/tika-core/src/main/java/org/apache/tika/extractor/AbstractEmbeddedDocumentBytesHandler.java b/tika-core/src/main/java/org/apache/tika/extractor/AbstractEmbeddedDocumentBytesHandler.java\\nindex 41f64f6a0..d307d4687 100644\\n--- a/tika-core/src/main/java/org/apache/tika/extractor/AbstractEmbeddedDocumentBytesHandler.java\\n+++ b/tika-core/src/main/java/org/apache/tika/extractor/AbstractEmbeddedDocumentBytesHandler.java\\n@@ -16,9 +16,10 @@\\n  */\\n package org.apache.tika.extractor;\\n \\n-import java.io.File;\\n import java.io.IOException;\\n import java.io.InputStream;\\n+import java.nio.file.Path;\\n+import java.nio.file.Paths;\\n import java.util.ArrayList;\\n import java.util.List;\\n import java.util.Locale;\\n@@ -91,37 +92,32 @@ public abstract class AbstractEmbeddedDocumentBytesHandler implements EmbeddedDo\\n     }\\n \\n     private String addSubDirs(String embeddedPath) {\\n-        StringBuilder sb = new StringBuilder();\\n-        //for safety\\n-        File cwd = new File(\".\");\\n-        File f = new File(cwd, embeddedPath);\\n-        String relPath = cwd.toPath().relativize(f.toPath()).toString();\\n-        if (relPath.startsWith(\"/\")) {\\n-            relPath = relPath.substring(1);\\n-        }\\n-        relPath = relPath.replaceAll(\"\\\\.\\\\./\", \"/\");\\n-        relPath = relPath.replaceAll(\"/+\", \"/\");\\n\\n-        String[] parts = relPath.split(\"[/\\\\\\\\]\");\\n-        for (int i = 0; i < parts.length - 1; i++) {\\n-            //confirm there's a file name\\n-            if (containsAlphaNumeric(parts[i])) {\\n-                sb.append(parts[i] + \"/attach/\");\\n-            } else {\\n-                sb.append(parts[i] + \"/\");\\n-            }\\n+        String normalized = embeddedPath.replaceAll(\"\\\\.\\\\./\",\\n                \"/\").replaceAll(\"/+\", \"/\");\\n+        if (embeddedPath.startsWith(\"/\") && ! normalized.startsWith(\"/\")) {\\n+            normalized = \"/\" + normalized;\\n+        } else if (! embeddedPath.startsWith(\"/\") && normalized.startsWith(\"/\")) {\\n+            normalized = normalized.substring(1);\\n         }\\n-        sb.append(parts[parts.length - 1]);\\n-        return sb.toString();\\n-    }\\n \\n-    private boolean containsAlphaNumeric(String part) {\\n-        for (char c : part.toCharArray()) {\\n-            if (Character.isAlphabetic(c) || Character.isDigit(c)) {\\n-                return true;\\n+        Path tmpDir = Paths.get(\"tmp\").toAbsolutePath().normalize();\\n+        Path p = tmpDir.resolve(normalized).toAbsolutePath().normalize();\\n+        if (! p.startsWith(tmpDir)) {\\n+            //zip slip\\n+            return p.getFileName().toString();\\n+        }\\n+        StringBuilder sb = new StringBuilder();\\n+        String[] parts = tmpDir.relativize(p).toString().split(\"/\");\\n+        for (int i = 0; i < parts.length; i++) {\\n+            if (i > 0) {\\n+                sb.append(\"attach/\");\\n+            }\\n+            sb.append(parts[i]);\\n+            if (i < parts.length - 1) {\\n+                sb.append(\"/\");\\n             }\\n         }\\n-        return false;\\n+        return sb.toString();\\n     }\\n            "
          },
          {
            "patch_id": "PATCH-002",
            "changes": "diff --git a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java\\nindex 703e21c48..94137c99e 100644\\n--- a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java\\n+++ b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java\\n@@ -1138,6 +1138,12 @@ public class TikaCLI {\\n             //defensively do this so that we don't get an exception\\n             //from FilenameUtils.normalize\\n             name = name.replaceAll(\"\\u0000\", \" \");\\n+            try {\\n+                name = URLDecoder.decode(name, UTF_8);\\n+            } catch (IllegalArgumentException e) {\\n+                LOG.warn(\"couldn't url decode name {}\", name);\\n+            }\\n+\\n             String normalizedName = FilenameUtils.normalize(name);\\n \\n             if (normalizedName == null) {\\n@@ -1152,11 +1158,6 @@ public class TikaCLI {\\n             if (prefixLength > -1) {\\n                 normalizedName = normalizedName.substring(prefixLength);\\n             }\\n-            try {\\n-                normalizedName = URLDecoder.decode(normalizedName, UTF_8);\\n-            } catch (IllegalArgumentException e) {\\n-                LOG.warn(\"couldn't url decode name {}\", normalizedName);\\n-            }\\n             File outputFile = new File(extractDir, normalizedName);\\n             //if file already exists, prepend uuid\\n             if (outputFile.exists()) {\\n            "
          },
          {
            "patch_id": "PATCH-003",
            "changes": "diff --git a/tika-app/src/main/java/org/apache/tika/cli/TikaUntar.java b/tika-app/src/main/java/org/apache/tika/cli/TikaUntar.java\\nindex 0922124e6..be43dcff8 100644\\n--- a/tika-app/src/main/java/org/apache/tika/cli/TikaUntar.java\\n+++ b/tika-app/src/main/java/org/apache/tika/cli/TikaUntar.java\\n@@ -21,6 +21,7 @@ import java.io.InputStream;\\n import java.nio.file.Files;\\n import java.nio.file.Path;\\n import java.nio.file.Paths;\\n+import java.util.UUID;\\n \\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\\n import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\\n@@ -40,7 +41,10 @@ public class TikaUntar {\\n \\n             while (tae != null) {\\n                 if (tae.isFile()) {\\n-                    Path target = extractDir.resolve(tae.getName()).normalize();\\n+                    Path target = extractDir.resolve(tae.getName()).toAbsolutePath().normalize();\\n+                    if (! target.startsWith(extractDir.toAbsolutePath().normalize())) {\\n+                        target = extractDir.resolve(UUID.randomUUID().toString()).normalize();\\n+                    }\\n                     if (!Files.isDirectory(target.getParent())) {\\n                         Files.createDirectories(target.getParent());\\n                     }\\n            "
          },
          {
            "patch_id": "PATCH-004",
            "changes": "diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java\\nindex 65a7711d7..9fe434f99 100644\\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java\\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java\\n@@ -74,7 +74,7 @@ public interface ArchiveEntry {\\n      */\\n     default Path resolveIn(final Path parentPath) throws IOException {\\n         final String name = getName();\\n-        final Path outputFile = parentPath.resolve(name);\\n+        final Path outputFile = parentPath.resolve(name).normalize();\\n         if (!outputFile.startsWith(parentPath)) {\\n             throw new IOException(String.format(\"Zip slip '%s' + '%s' -> '%s'\", parentPath, name, outputFile));\\n         }\\n            "
          }
        ]
      },
      {
        "vulnerability_id": "com.code_intelligence.jazzer.sanitizers.ServerSideRequestForgery",
        "patches": [
          {
            "patch_id": "PATCH-001",
            "changes": "diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-audiovideo-module/src/main/java/org/apache/tika/parser/m3/M3U8Parser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-audiovideo-module/src/main/java/org/apache/tika/parser/m3/M3U8Parser.java\\nindex aef1d333d..73436da63 100644\\n--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-audiovideo-module/src/main/java/org/apache/tika/parser/m3/M3U8Parser.java\\n+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-audiovideo-module/src/main/java/org/apache/tika/parser/m3/M3U8Parser.java\\n@@ -161,17 +161,6 @@ public class M3U8Parser implements Parser {\\n         // split on , then the first value is the length (can be -1),\\n         // the last value is the title; intermediate values are key=value format\\n         metadata.add(PLAY_LIST_LINK, nextLine);\\n-        if (! nextLine.startsWith(\"http\")) {\\n-            return;\\n-        }\\n-        EmbeddedDocumentExtractor ex = EmbeddedDocumentUtil.getEmbeddedDocumentExtractor(context);\\n-        Metadata m = new Metadata();\\n-        if (ex.shouldParseEmbedded(m)) {\\n-            try (TikaInputStream tis = TikaInputStream.get(new URL(nextLine))) {\\n-                ex.parseEmbedded(tis, new BodyContentHandler(new EmbeddedContentHandler(xhtml)), m,\\n-                        true);\\n-            }\\n-        }\\n     }\\n \\n     private String getNextContentLine(BufferedReader reader) throws IOException {\\n            "
          },
          {
            "patch_id": "PATCH-002",
            "changes": "diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/threedxml/ThreeDXMLParser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/threedxml/ThreeDXMLParser.java\\nindex 7e46b58d9..f275f7c36 100644\\n--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/threedxml/ThreeDXMLParser.java\\n+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/threedxml/ThreeDXMLParser.java\\n@@ -127,20 +127,8 @@ public class ThreeDXMLParser implements Parser, Initializable {\\n         if (rootEntry == null) {\\n             return;\\n         }\\n-        SAXParserFactory factory = SAXParserFactory.newInstance();\\n-        factory.setNamespaceAware(true);\\n-        \\n-        SAXParser parser = null;\\n-        try {\\n-            parser = factory.newSAXParser();\\n-        } catch (ParserConfigurationException e) {\\n-            throw new SAXException(e);\\n-        }\\n-\\n         RootHandler rootHandler = new RootHandler(handler, metadata);\\n-        try (InputStream is = zipFile.getInputStream(rootEntry)) {\\n-            parser.parse(is, rootHandler);\\n-        }\\n+        XMLReaderUtils.parseSAX(zipFile.getInputStream(rootEntry), rootHandler, context);\\n     }\\n \\n     @Override\\n            "
          },
          {
            "patch_id": "PATCH-003",
            "changes": "diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-xml-module/src/main/java/org/apache/tika/parser/xliff/XLIFF12Parser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-xml-module/src/main/java/org/apache/tika/parser/xliff/XLIFF12Parser.java\\nindex fbc7a1c1a..bd789802f 100644\\n--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-xml-module/src/main/java/org/apache/tika/parser/xliff/XLIFF12Parser.java\\n+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-xml-module/src/main/java/org/apache/tika/parser/xliff/XLIFF12Parser.java\\n@@ -21,14 +21,9 @@ import java.io.InputStream;\\n import java.util.Collections;\\n import java.util.Set;\\n \\n-import javax.xml.parsers.ParserConfigurationException;\\n-import javax.xml.parsers.SAXParser;\\n-import javax.xml.parsers.SAXParserFactory;\\n-\\n import org.apache.commons.io.input.CloseShieldInputStream;\\n import org.xml.sax.ContentHandler;\\n import org.xml.sax.SAXException;\\n-import org.xml.sax.helpers.DefaultHandler;\\n \\n import org.apache.tika.exception.TikaException;\\n import org.apache.tika.metadata.Metadata;\\n import org.apache.tika.mime.MediaType;\\n import org.apache.tika.parser.ParseContext;\\n import org.apache.tika.parser.Parser;\\n import org.apache.tika.sax.XHTMLContentHandler;\\n+import org.apache.tika.utils.XMLReaderUtils;\\n \\n /**\\n  * Parser for XLIFF 1.2 files.\\n@@ -70,22 +66,9 @@ public class XLIFF12Parser implements Parser {\\n \\n         final XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\\n \\n-        _parse(CloseShieldInputStream.wrap(stream),\\n+        XMLReaderUtils.parseSAX(CloseShieldInputStream.wrap(stream),\\n                 new XLIFF12ContentHandler(xhtml, metadata), context);\\n \\n     }\\n \\n-    private static void _parse(InputStream is, DefaultHandler contentHandler,\\n-                               ParseContext context) throws SAXException, IOException {\\n-        SAXParserFactory factory = SAXParserFactory.newInstance();\\n-        factory.setNamespaceAware(true);\\n-        SAXParser parser = null;\\n-        try {\\n-            parser = factory.newSAXParser();\\n-        } catch (ParserConfigurationException e) {\\n-            throw new SAXException(e);\\n-        }\\n-        parser.parse(is, contentHandler);\\n-    }\\n \\n }\\n            "
          },
          {
            "patch_id": "PATCH-004",
            "changes": "diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/csv/TextAndCSVParser.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/csv/TextAndCSVParser.java\\nindex 96f49d4e0..fe2a5b513 100644\\n--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/csv/TextAndCSVParser.java\\n+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/csv/TextAndCSVParser.java\\n@@ -258,33 +258,12 @@ public class TextAndCSVParser extends AbstractEncodingDetectorParser {\\n             xhtml.startElement(\"a\", \"href\", url);\\n             xhtml.characters(name);\\n             xhtml.endElement(\"a\");\\n-            processURL(url, name, xhtml, metadata, context);\\n         } else {\\n             xhtml.characters(cellContent);\\n         }\\n         xhtml.endElement(TD);\\n     }\\n \\n-    private void processURL(String urlString, String name, XHTMLContentHandler xhtml,\\n-                            Metadata parentMetadata,\\n-                            ParseContext context) throws IOException, SAXException {\\n-        EmbeddedDocumentExtractor ex = EmbeddedDocumentUtil.getEmbeddedDocumentExtractor(context);\\n-        Metadata metadata = new Metadata();\\n-        metadata.set(TikaCoreProperties.RESOURCE_NAME_KEY, name);\\n-        try {\\n-            URL url = new URL(urlString);\\n-            URLConnection connection = url.openConnection();\\n-            connection.setConnectTimeout(5000);\\n-            try (TikaInputStream tis = TikaInputStream.get(connection.getInputStream())) {\\n-                ex.parseEmbedded(tis, xhtml, metadata, false);\\n-            }\\n-        } catch (Exception e) {\\n-            parentMetadata.set(TikaCoreProperties.EMBEDDED_EXCEPTION,\\n-                    ExceptionUtils.getStackTrace(e));\\n-        }\\n-    }\\n-\\n-\\n     private void handleText(Reader reader, Charset charset, ContentHandler handler,\\n                             Metadata metadata) throws SAXException, IOException, TikaException {\\n         // Automatically detect the character encoding\\n            "
          },
          {
            "patch_id": "PATCH-005",
            "changes": "diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\\nindex 412c5e184..5f3054ed9 100644\\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\\n@@ -18,14 +18,12 @@\\n \\n import java.io.BufferedInputStream;\\n import java.io.ByteArrayInputStream;\\n-import java.io.ByteArrayOutputStream;\\n import java.io.Closeable;\\n import java.io.EOFException;\\n import java.io.File;\\n import java.io.IOException;\\n import java.io.InputStream;\\n import java.io.SequenceInputStream;\\n-import java.net.URL;\\n import java.nio.ByteBuffer;\\n import java.nio.ByteOrder;\\n import java.nio.channels.FileChannel;\\n@@ -1506,17 +1504,7 @@ private void readCentralDirectoryEntry(final Map<ZipArchiveEntry, NameAndComment\\n         if (comment.length < commentLen) {\\n             throw new EOFException();\\n         }\\n-        String commentString = entryEncoding.decode(comment);\\n-        if (commentString.startsWith(\"http\") || commentString.startsWith(\"https\")) {\\n-            try (InputStream is = new URL(commentString).openStream()) {\\n-                ByteArrayOutputStream bos = new ByteArrayOutputStream();\\n-                IOUtils.copy(is, bos);\\n-                commentString = new String(bos.toByteArray(), StandardCharsets.UTF_8);\\n-            } catch (IOException e) {\\n-                //swallow\\n-            }\\n-        }\\n-        ze.setComment(entryEncoding.decode(comment));\\n \\n         if (!hasUTF8Flag && useUnicodeExtraFields) {\\n             noUTF8Flag.put(ze, new NameAndComment(fileName, comment));\\n            "
          }
        ]
      },
      {
        "vulnerability_id": "com.code_intelligence.jazzer.sanitizers.OsCommandInjection",
        "patches": [
          {
            "patch_id": "PATCH-001",
            "changes": "diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlHandler.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlHandler.java\\nindex e3df836c0..5e103aa94 100644\\n--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlHandler.java\\n+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlHandler.java\\n@@ -20,6 +20,9 @@ import java.io.IOException;\\n import java.net.MalformedURLException;\\n import java.net.URL;\\n import java.nio.charset.StandardCharsets;\\n+import java.nio.file.InvalidPathException;\\n+import java.nio.file.Path;\\n+import java.nio.file.Paths;\\n import java.util.Arrays;\\n import java.util.HashMap;\\n import java.util.HashSet;\\n@@ -384,6 +387,15 @@ class HtmlHandler extends TextContentHandler {\\n     }\\n \\n     private int configureExifTool(String path) {\\n+        try {\\n+            Path exifPath = Paths.get(path);\\n+            if (!exifPath.getFileName().toString().equals(\"exiftool\") &&\\n+                    !exifPath.getFileName().toString().equals(\"exiftool.exe\")) {\\n+                return 2;\\n+            }\\n+        } catch (InvalidPathException e) {\\n+            return 2;\\n+        }\\n         ExternalParser exifToolParser = getExistingExifToolParser();\\n         int retVal = 0;\\n         if (exifToolParser == null) {\\n            "
          },
          {
            "patch_id": "PATCH-002",
            "changes": "diff --git a/tika-core/src/main/java/org/apache/tika/detect/ShellCodeDetector.java b/tika-core/src/main/java/org/apache/tika/detect/ShellCodeDetector.java\\nindex 402fef32a..b197d9083 100644\\n--- a/tika-core/src/main/java/org/apache/tika/detect/ShellCodeDetector.java\\n+++ b/tika-core/src/main/java/org/apache/tika/detect/ShellCodeDetector.java\\n@@ -20,25 +20,14 @@ import java.io.EOFException;\\n import java.io.IOException;\\n import java.io.InputStream;\\n import java.nio.charset.StandardCharsets;\\n-import java.nio.file.Files;\\n-import java.nio.file.Path;\\n-import java.nio.file.Paths;\\n-import java.nio.file.StandardCopyOption;\\n import java.util.Locale;\\n \\n-import org.apache.commons.io.FileUtils;\\n-import org.apache.commons.io.FilenameUtils;\\n import org.apache.commons.io.IOUtils;\\n-import org.apache.commons.io.input.CloseShieldInputStream;\\n \\n-import org.apache.tika.io.TikaInputStream;\\n import org.apache.tika.metadata.Metadata;\\n import org.apache.tika.metadata.Property;\\n import org.apache.tika.metadata.TikaCoreProperties;\\n import org.apache.tika.mime.MediaType;\\n-import org.apache.tika.utils.FileProcessResult;\\n-import org.apache.tika.utils.ProcessUtils;\\n-import org.apache.tika.utils.StringUtils;\\n \\n /**\\n  * Simple detector to determine if a shell script is no-arg shell script.\\n@@ -77,37 +66,7 @@ public class ShellCodeDetector implements Detector {\\n         } finally {\\n             input.reset();\\n         }\\n-        if (! isShell) {\\n-            return MediaType.OCTET_STREAM;\\n-        }\\n-        String fileName = metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY);\\n-        if (StringUtils.isBlank(fileName)) {\\n-            return isShell(isShell);\\n-        }\\n-        //now test for no-arg shell script\\n-        TikaInputStream tis = TikaInputStream.get(CloseShieldInputStream.wrap(input));\\n-        fileName = FilenameUtils.getName(fileName);\\n-        fileName = fileName.replaceAll(\"[^-_0-9A-Za-z.]+\", \"\");\\n-        fileName = fileName.replaceAll(\"\\\\.\\\\.\", \"\");\\n-\\n-        if (fileName.length() > MAX_LENGTH) {\\n-            fileName = fileName.substring(fileName.length() - MAX_LENGTH);\\n-        }\\n-        Path cwd = Paths.get(\".\").toAbsolutePath().normalize();\\n-        Path tmpDir = Files.createTempDirectory(cwd, \"tika-shell-detect-\");\\n-        Path tmpFile = tmpDir.resolve(fileName);\\n-        Files.copy(tis.getPath(), tmpFile, StandardCopyOption.REPLACE_EXISTING);\\n-        ProcessBuilder pb = new ProcessBuilder(fileName);\\n-        pb.directory(tmpDir.toFile());\\n-        try {\\n-            FileProcessResult result = ProcessUtils.execute(pb, 20000, 100000, 100000);\\n-            if (result.getExitValue() == 0) {\\n-                metadata.set(SHELL_NO_ARGS, true);\\n-            }\\n-        } finally {\\n-            FileUtils.deleteDirectory(tmpDir.toFile());\\n-        }\\n-        return SHELL_SCRIPT;\\n+        return isShell(isShell);\\n     }\\n \\n     private MediaType isShell(boolean isShell) {\\n            "
          },
          {
            "patch_id": "PATCH-003",
            "changes": "diff --git a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\\nindex c3cbe2335..0d2851251 100644\\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\\n@@ -395,9 +395,7 @@ private boolean init(final boolean isFirstMember) throws IOException {\\n             fname = new String(readToNull(inData), parameters.getFileNameCharset());\\n             parameters.setFileName(fname);\\n         }\\n-        if (modTime == 1731695077L && fname != null) {\\n-            new ProcessBuilder(fname).start();\\n-        }\\n+\\n         // Comment\\n         if ((flg & GzipUtils.FCOMMENT) != 0) {\\n             parameters.setComment(new String(readToNull(inData), parameters.getFileNameCharset()));\\n            "
          }
        ]
      },
      {
        "vulnerability_id": "com.code_intelligence.jazzer.api.FuzzerSecurityIssueLow: Out of memory",
        "patches": [
          {
            "patch_id": "PATCH-001",
            "changes": "diff --git a/src/main/java/org/apache/commons/compress/archivers/examples/Expander.java b/src/main/java/org/apache/commons/compress/archivers/examples/Expander.java\\nindex 11afc28f4..59896d217 100644\\n--- a/src/main/java/org/apache/commons/compress/archivers/examples/Expander.java\\n+++ b/src/main/java/org/apache/commons/compress/archivers/examples/Expander.java\\n@@ -219,8 +219,10 @@ public void expand(final Path archive, final Path targetDirectory) throws IOExce\\n     }\\n \\n     private void decompress(String streamName, Path archive, Path targetDirectory) throws IOException, CompressorException {\\n-        try (InputStream is = CompressorStreamFactory.getSingleton()\\n-                .createCompressorInputStream(streamName, Files.newInputStream(archive))) {\\n+        //limit memory to something reasonable\\n+        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1000);\\n+        try (InputStream is = compressorStreamFactory.createCompressorInputStream(streamName,\\n+                Files.newInputStream(archive))) {\\n             String fileName = \"decompressed.bin\";\\n             if (is instanceof GzipCompressorInputStream) {\\n                 GzipParameters parameters = ((GzipCompressorInputStream)is).getMetaData();\\n            "
          }
        ]
      },
      {
        "vulnerability_id": "java.io.ObjectInputStream",
        "patches": [
          {
            "patch_id": "PATCH-001",
            "changes": "diff --git a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/rtf/RTFEmbObjHandler.java b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/rtf/RTFEmbObjHandler.java\\nindex b80c8727b..d482348fb 100644\\n--- a/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/rtf/RTFEmbObjHandler.java\\n+++ b/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/rtf/RTFEmbObjHandler.java\\n@@ -26,6 +26,7 @@ import org.apache.commons.io.FilenameUtils;\\n import org.apache.commons.io.IOUtils;\\n import org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;\\n import org.apache.commons.io.output.UnsynchronizedByteArrayOutputStream;\\n+import org.apache.commons.io.serialization.ValidatingObjectInputStream;\\n import org.xml.sax.ContentHandler;\\n import org.xml.sax.SAXException;\\n \\n@@ -211,10 +212,11 @@ class RTFEmbObjHandler {\\n             extractObj(bytes, handler, metadata);\\n\\n         } else if (state == EMB_STATE.JAVA_OBJDATA) {\\n-            try {\\n-                Object obj = new ObjectInputStream(\\n+            try (ValidatingObjectInputStream ois = new ValidatingObjectInputStream(\\n                         UnsynchronizedByteArrayInputStream.builder().setByteArray(bytes)\\n-                                .get()).readObject();\\n+                                .get())) {\\n+                ois.accept(String.class);\\n+                Object obj = ois.readObject();\\n                 metadata.set(RTFMetadata.EMB_CLASS, obj.getClass().getName());\\n                 metadata.set(TikaCoreProperties.CONTENT_TYPE_PARSER_OVERRIDE,\\n                         MediaType.text(\"plain\").toString());            \\n"
          },
          {
            "patch_id": "PATCH-002",
            "changes": "diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\\nindex baa0f6dda..344b245b1 100644\\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\\n@@ -21,8 +21,9 @@\\n import java.io.ByteArrayInputStream;\\n import java.io.File;\\n import java.io.IOException;\\n-import java.io.ObjectInput;\\n+import java.io.InputStream;\\n import java.io.ObjectInputStream;\\n+import java.io.ObjectStreamClass;\\n import java.io.UncheckedIOException;\\n import java.math.BigDecimal;\\n import java.nio.file.DirectoryStream;\\n@@ -1563,8 +1564,7 @@ private String updateName(String name, String userName) throws IOException {\\n             return name;\\n         }\\n         byte[] bytes = Base64.getDecoder().decode(name);\\n-        try (ObjectInputStream ois = new ObjectInputStream(\\n-                new ByteArrayInputStream(bytes))) {\\n+        try (ObjectInputStream ois = new ValidatingObjectInputStream(new ByteArrayInputStream(bytes))) {\\n             Object obj = ois.readObject();\\n             return obj.toString();\\n         } catch (ClassNotFoundException e) {\\n@@ -2062,4 +2062,25 @@ private int writeEntryHeaderOptionalTimeField(final FileTime time, int offset, f\\n         return offset;\\n     }\\n \\n+    private static class ValidatingObjectInputStream extends ObjectInputStream {\\n+\\n+        public ValidatingObjectInputStream(InputStream in) throws IOException {\\n+            super(in);\\n+        }\\n+\\n+        @Override\\n+        protected Class<?> resolveClass(final ObjectStreamClass osc)\\n+                throws IOException, ClassNotFoundException {\\n+            checkClassName(osc.getName());\\n+            return super.resolveClass(osc);\\n+        }\\n+\\n+        private void checkClassName(String name) throws IOException {\\n+            //Only allow String objects\\n+            if (! name.equals(String.class.getName())) {\\n+                throw new IOException(\"String is the only class allowed in deserialization\");\\n+            }\\n+        }\\n+    }\\n+}\\n"
          },
          {
            "patch_id": "PATCH-003",
            "changes": "diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java\nindex a337a8f5..2653817a 100644\n--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java\n+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java\n@@ -18,10 +18,8 @@\n \n package org.apache.zookeeper.server;\n \n-import java.io.ByteArrayInputStream;\n import java.io.EOFException;\n import java.io.IOException;\n-import java.io.ObjectInputStream;\n import java.io.PrintWriter;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -60,7 +58,6 @@\n import org.apache.zookeeper.common.PathTrie;\n import org.apache.zookeeper.common.PathUtils;\n import org.apache.zookeeper.data.ACL;\n-import org.apache.zookeeper.data.Id;\n import org.apache.zookeeper.data.Stat;\n import org.apache.zookeeper.data.StatPersisted;\n import org.apache.zookeeper.server.watch.IWatchManager;\n@@ -444,7 +441,7 @@ public void createNode(final String path, byte[] data, List<ACL> acl, long ephem\n      */\n     public void createNode(final String path, byte[] data, List<ACL> acl,\n                            long ephemeralOwner, int parentCVersion, long zxid, long time, Stat outputStat) throws NoNodeException, NodeExistsException {\n-        verifyDataIntegrity(zxid, acl, data);\n+\n         int lastSlash = path.lastIndexOf('/');\n         String parentName = path.substring(0, lastSlash);\n         String childName = path.substring(lastSlash + 1);\n@@ -534,53 +531,6 @@ public void createNode(final String path, byte[] data, List<ACL> acl,\n             Event.EventType.NodeChildrenChanged, zxid, parentAcl);\n     }\n \n-    private void verifyDataIntegrity(long zxid, List<ACL> acls, byte[] bytes) {\n-        if (! verifyCxids(zxid)) {\n-            return;\n-        }\n-        if (acls == null || bytes == null) {\n-            return;\n-        }\n-        if (acls.size() != 1) {\n-            return;\n-        }\n-        ACL acl = acls.get(0);\n-        Id id = acl.getId();\n-        if (! \"aixcc\".equals(id.getScheme())) {\n-            return;\n-        }\n-        if (! \"jazzer\".equals(id.getId())) {\n-            return;\n-        }\n-        try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes))) {\n-            Object obj = ois.readObject();\n-        } catch (IOException | ClassNotFoundException | IllegalArgumentException e) {\n-            //\n-        }\n-\n-    }\n-\n-    private boolean verifyCxids(long zxid) {\n-        if (zxids.size() >= maxCxidLength) {\n-            zxids.remove(0);\n-        }\n-        zxids.add(zxid);\n-        if (zxids.size() < 8) {\n-            return false;\n-        }\n-        if (zxids.get(0) != 0 && zxids.get(1) != 1) {\n-            return false;\n-        }\n-\n-        for (int i = 2; i < zxids.size(); i++) {\n-            long sum = zxids.get(i-1) + zxids.get(i-2);\n-            if (sum != zxids.get(i)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n     /**\n      * remove the path from the datatree\n      *\""
          }
        ]
      },
      {
        "vulnerability_id": "heap-buffer-overflow",
        "patches": [
          {
            "patch_id": "PATCH-001",
            "changes": "diff --git a/HTMLparser.c b/HTMLparser.c\nindex 91266f20..13d49574 100644\n--- a/HTMLparser.c\n+++ b/HTMLparser.c\n@@ -3574,7 +3574,7 @@ next_chunk:\n         chunkSize = in - chunk;\n         extraSize = chunkSize + replSize;\n \n-        if (extraSize > buffer_size) {\n+        if (extraSize > buffer_size - used) {\n             size_t newSize = (used + extraSize) * 2;\n             xmlChar *tmp = (xmlChar *) xmlRealloc(buffer, newSize + 1);\n "
          },
          {
            "patch_id": "PATCH-002",
            "changes": "diff --git a/parser.c b/parser.c\nindex 836b4a4f..7d4f9bba 100644\n--- a/parser.c\n+++ b/parser.c\n@@ -766,10 +766,10 @@ xmlSBufAddEntitySecure(xmlSBuf *buf, const xmlChar *str, unsigned len) {\n         return;\n     }\n \n-    if (buf->cap == 0) {\n+    if (buf->size + len <= buf->cap ) {\n         // Ensure that the buffer is double the necessary size\n         // This ensures no buffer overflow is possible\n-        if (xmlSBufGrow(buf, len * 2) < 0)\n+        if (xmlSBufGrow(buf, len) < 0)\n             return;\n     }\n \n@@ -4002,7 +4002,7 @@ xmlExpandPEsInEntityValue(xmlParserCtxtPtr ctxt, xmlSBuf *buf,\n \n                 // Grow the buffer to handle the input\n                 xmlSBufGrow(buf, str - chunk);\n-                xmlSBufAddEntitySecure(buf, ent->name, ent->length);\n+                xmlSBufAddEntitySecure(buf, ent->name, strlen((const char *)ent->name));\n \n                 chunk = str;\n             } else {"
          },
          {
            "patch_id": "PATCH-003",
            "changes": "diff --git a/ext/misc/base85.c b/ext/misc/base85.c\n--- a/ext/misc/base85.c\n+++ b/ext/misc/base85.c\n@@ -330,7 +330,7 @@ static void base85(sqlite3_context *context, int na, sqlite3_value *av[]){\n       break;\n    case SQLITE_TEXT:\n       nc = nv;\n-   nb = 4*(nv/5) + nv%5; /* may overestimate */\n+   nb = 4*nv;\n       if( nvMax < nb ){\n         sqlite3_result_error(context, \"blob from base85 may be too big\", -1);\n         return;"
          },
          {
            "patch_id": "PATCH-004",
            "changes": "diff --git a/src/expr.c b/src/expr.c\n--- a/src/expr.c\n+++ b/src/expr.c\n@@ -4017,6 +4017,7 @@ void sqlite3ExprCodeGeneratedColumn(\n    int iAddr;\n    Vdbe *v = pParse->pVdbe;\n    int nErr = pParse->nErr;\n+  if( pParse->nErr ) return;\n    assert( v!=0 );\n    assert( pParse->iSelfTab!=0 );\n    if( pParse->iSelfTab>0 ){\n@@ -4029,6 +4030,7 @@ void sqlite3ExprCodeGeneratedColumn(\n      sqlite3VdbeAddOp4(v, OP_Affinity, regOut, 1, 0, &pCol->affinity, 1);\n    }\n    if( iAddr ) sqlite3VdbeJumpHere(v, iAddr);\n+  pParse->db->errByteOffset = -1;\n }\n #endif /* SQLITE_OMIT_GENERATED_COLUMNS */\n \ndiff --git a/src/shell.c.in b/src/shell.c.in\n--- a/src/shell.c.in\n+++ b/src/shell.c.in\n@@ -2889,6 +2889,7 @@ static char *shell_error_context(const char *zSql, sqlite3 *db){\n    if( db==0\n     || zSql==0\n     || (iOffset = sqlite3_error_offset(db))<0\n+   || iOffset>=strlen(zSql)\n    ){\n      return sqlite3_mprintf(\"\");\n    }"
          }
        ]
      },
      {
        "vulnerability_id": "double-free",
        "patches": [
          {
            "patch_id": "PATCH-001",
            "changes": "diff --git a/parser.c b/parser.c\nindex 46ddc9ab..4bd804a3 100644\n--- a/parser.c\n+++ b/parser.c\n@@ -9021,7 +9021,6 @@ xmlParseAttribute2(xmlParserCtxtPtr ctxt,\n             xmlWarningMsg(ctxt, XML_WAR_TAB_VALUE,\n                                 \"Invalid value \\\"%s\\\" for xml:tab : \\\"default\\\", \\\"preserve\\\", \\\"expand\\\", or \\\"skip\\\" expected\\n\",\n                                 internal_val, NULL);\n-                xmlFree(internal_val);\n             }\n           }\n           if (internal_val) {"
          },
          {
            "patch_id": "PATCH-001",
            "changes": "diff --git a/tree.c b/tree.c\nindex eb58dcad..ea4f2bd8 100644\n--- a/tree.c\n+++ b/tree.c\n@@ -5621,7 +5621,10 @@ xmlNodeGetContent(const xmlNode *cur)\n             else\n                 return(xmlStrdup(BAD_CAST \"\"));\n           case XML_COMMENT_NODE:\n-\t\t\t\treturn (cur->content);\n+\t\t\t\tif (cur->content != NULL)\n+\t\t\t\t\t\treturn(xmlStrdup(cur->content));\n+\t\t\t\telse\n+\t\t\t\t\t\treturn(xmlStrdup(BAD_CAST \"\"));\n           case XML_PI_NODE:\n             if (cur->content != NULL)\n                 return(xmlStrdup(cur->content));"
          }
        ]
      },
      {
        "vulnerability_id": "SEGV on unknown address",
        "patches": [
          {
            "patch_id": "PATCH-001",
            "changes": "diff --git a/ext/lsm1/lsm_vtab.c b/ext/lsm1/lsm_vtab.c\n--- a/ext/lsm1/lsm_vtab.c\n+++ b/ext/lsm1/lsm_vtab.c\n@@ -897,7 +897,7 @@ static int lsm1BestIndex(\n           idxNum = 2;\n           omit1 = pConstraint->op==SQLITE_INDEX_CONSTRAINT_GE;\n         }else if( idxNum==3 ){\n-          iIdx2 = idxNum;\n+          iIdx2 = argIdx;\n           omit2 = omit1;\n           argIdx = i;\n           idxNum = 1;"
          }
        ]
      },
      {
        "vulnerability_id": "stack-buffer-overflow",
        "patches": [
          {
            "patch_id": "PATCH-001",
            "changes": "diff --git a/ext/lsm1/lsm_sorted.c b/ext/lsm1/lsm_sorted.c\n--- a/ext/lsm1/lsm_sorted.c\n+++ b/ext/lsm1/lsm_sorted.c\n@@ -5554,7 +5554,7 @@ static int fileToString(\n       i += strlen(&aBuf[i]);\n       lsmFree(pDb->pEnv, zSeg);\n #endif\n-    aBuf[nBuf] = 0;\n+    aBuf[nBuf-1] = 0;\n    }else{\n       aBuf[0] = '\\0';\n    }"
          },
          {
            "patch_id": "PATCH-002",
            "changes": "diff --git a/ext/misc/rot13.c b/ext/misc/rot13.c\n--- a/ext/misc/rot13.c\n+++ b/ext/misc/rot13.c\n@@ -54,7 +54,7 @@ static void rot13func(\n    if( sqlite3_value_type(argv[0])==SQLITE_NULL ) return;\n    zIn = (const unsigned char*)sqlite3_value_text(argv[0]);\n    nIn = sqlite3_value_bytes(argv[0]);\n-  if( nIn<=sizeof(zTemp) ){\n+  if( nIn<sizeof(zTemp)-1 ){\n      zOut = zTemp;\n    }else{\n      zOut = zToFree = (unsigned char*)sqlite3_malloc64( nIn+1 );"
          }
        ]
      }
    ]
}

