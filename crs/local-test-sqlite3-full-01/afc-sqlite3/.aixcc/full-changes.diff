diff --git a/ext/misc/rot13.c b/ext/misc/rot13.c
index 05b4a1880..259615dc8 100644
--- a/ext/misc/rot13.c
+++ b/ext/misc/rot13.c
@@ -54,7 +54,7 @@ static void rot13func(
   if( sqlite3_value_type(argv[0])==SQLITE_NULL ) return;
   zIn = (const unsigned char*)sqlite3_value_text(argv[0]);
   nIn = sqlite3_value_bytes(argv[0]);
-  if( nIn<sizeof(zTemp)-1 ){
+  if( nIn<=sizeof(zTemp) ){
     zOut = zTemp;
   }else{
     zOut = zToFree = (unsigned char*)sqlite3_malloc64( nIn+1 );
diff --git a/jimsh b/jimsh
new file mode 100755
index 000000000..1184d6802
Binary files /dev/null and b/jimsh differ
diff --git a/main.mk b/main.mk
index 8cc37ff77..48399b2d3 100644
--- a/main.mk
+++ b/main.mk
@@ -760,7 +760,8 @@ TESTSRC += \
   $(TOP)/ext/misc/unionvtab.c \
   $(TOP)/ext/misc/wholenumber.c \
   $(TOP)/ext/misc/zipfile.c \
-  $(TOP)/ext/rtree/test_rtreedoc.c
+  $(TOP)/ext/rtree/test_rtreedoc.c \
+  $(TOP)/ext/misc/rot13.c
 
 # Source code to the library files needed by the test fixture
 #
@@ -815,6 +816,7 @@ TESTSRC2 = \
   $(TOP)/ext/fts3/fts3_write.c \
   $(TOP)/ext/session/sqlite3session.c \
   $(TOP)/ext/misc/stmt.c \
+  $(TOP)/ext/misc/rot13.c \
   fts5.c
 
 # Header files used by all library source files.
diff --git a/src/expr.c b/src/expr.c
index cc915987d..083204ec5 100644
--- a/src/expr.c
+++ b/src/expr.c
@@ -4277,7 +4277,6 @@ void sqlite3ExprCodeGeneratedColumn(
     sqlite3VdbeAddOp4(v, OP_Affinity, regOut, 1, 0, &pCol->affinity, 1);
   }
   if( iAddr ) sqlite3VdbeJumpHere(v, iAddr);
-  if( pParse->nErr>nErr ) pParse->db->errByteOffset = -1;
 }
 #endif /* SQLITE_OMIT_GENERATED_COLUMNS */
 
diff --git a/src/shell.c.in b/src/shell.c.in
index 3fb608ff7..ffc733030 100644
--- a/src/shell.c.in
+++ b/src/shell.c.in
@@ -1357,6 +1357,7 @@ INCLUDE ../ext/misc/appendvfs.c
 #ifdef SQLITE_HAVE_ZLIB
 INCLUDE ../ext/misc/zipfile.c
 INCLUDE ../ext/misc/sqlar.c
+INCLUDE ../ext/misc/rot13.c
 #endif
 INCLUDE ../ext/expert/sqlite3expert.h
 INCLUDE ../ext/expert/sqlite3expert.c
@@ -3094,7 +3095,6 @@ static char *shell_error_context(const char *zSql, sqlite3 *db){
   if( db==0
    || zSql==0
    || (iOffset = sqlite3_error_offset(db))<0
-   || iOffset>=(int)strlen(zSql)
   ){
     return sqlite3_mprintf("");
   }
@@ -5642,6 +5642,7 @@ static void open_db(ShellState *p, int openFlags){
     sqlite3_base64_init(p->db, 0, 0);
     sqlite3_base85_init(p->db, 0, 0);
     sqlite3_regexp_init(p->db, 0, 0);
+    sqlite3_rot_init(p->db, 0, 0);
     sqlite3_ieee_init(p->db, 0, 0);
     sqlite3_series_init(p->db, 0, 0);
 #ifndef SQLITE_SHELL_FIDDLE
diff --git a/src/test1.c b/src/test1.c
index cf5d484e9..c8dac3b1e 100644
--- a/src/test1.c
+++ b/src/test1.c
@@ -8132,6 +8132,7 @@ static int SQLITE_TCLAPI tclLoadStaticExtensionCmd(
   extern int sqlite3_ieee_init(sqlite3*,char**,const sqlite3_api_routines*);
   extern int sqlite3_nextchar_init(sqlite3*,char**,const sqlite3_api_routines*);
   extern int sqlite3_percentile_init(sqlite3*,char**,const sqlite3_api_routines*);
+  extern int sqlite3_rot_init(sqlite3*,char**,const sqlite3_api_routines*);
 #ifndef SQLITE_OMIT_VIRTUALTABLE
   extern int sqlite3_prefixes_init(sqlite3*,char**,const sqlite3_api_routines*);
 #endif
@@ -8166,6 +8167,7 @@ static int SQLITE_TCLAPI tclLoadStaticExtensionCmd(
     { "ieee754",               sqlite3_ieee_init                 },
     { "nextchar",              sqlite3_nextchar_init             },
     { "percentile",            sqlite3_percentile_init           },
+    { "rot13",                 sqlite3_rot_init                },
 #ifndef SQLITE_OMIT_VIRTUALTABLE
     { "prefixes",              sqlite3_prefixes_init             },
 #endif
diff --git a/test/gencol1.test b/test/gencol1.test
index ed7ea567d..ef72e563e 100644
--- a/test/gencol1.test
+++ b/test/gencol1.test
@@ -298,15 +298,6 @@ do_execsql_test gencol1-8.10 {
   INSERT INTO t0 VALUES (0),(99);
   SELECT * FROM t0;
 } {1 1 0 1 1 99}
-do_catchsql_test gencol1-8.20 {
-  DROP TABLE IF EXISTS t0;
-  CREATE TABLE t0(
-    c0,
-    c1 AS(c0 + c2),
-    c2 AS(c1) CHECK(c2)
-  );
-  UPDATE t0 SET c0 = NULL;
-} {1 {generated column loop on "c2"}}
 
 # 2019-11-21 Problems in the new generated column logic
 # reported by Yongheng Chen and Rui Zhong
diff --git a/test/rot13.test b/test/rot13.test
new file mode 100644
index 000000000..219d3f547
--- /dev/null
+++ b/test/rot13.test
@@ -0,0 +1,37 @@
+set testdir [file dirname $argv0]
+source $testdir/tester.tcl
+
+if {[catch {load_static_extension db rot13} error]} {
+  puts "Skipping rot13 tests, hit load error: $error"
+  finish_test; return
+}
+
+do_execsql_test rot13-0.0 {
+  SELECT rot13('hello');
+} uryyb
+
+do_execsql_test rot13-1.2 {
+  SELECT rot13('HELLO');
+} URYYB
+
+do_execsql_test rot13-1.3 {
+  SELECT rot13('HelloWorld');
+} UryybJbeyq
+
+do_execsql_test rot13-1.4 {
+  SELECT rot13('123!@#');
+} 123!@#
+
+do_execsql_test rot13-1.5 {
+  SELECT rot13('');
+} {{}}
+
+do_execsql_test rot13-1.6 {
+  SELECT rot13(NULL);
+} {{}}
+
+do_execsql_test rot13-1.8 {
+  SELECT rot13('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
+} nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM
+
+finish_test
