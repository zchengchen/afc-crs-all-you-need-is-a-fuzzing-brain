commit 1fac0ad3848bc4e9cb6afd6de004e6c448da20e9
Author: Isaac Goldthwaite <igoldthwaite@kududyn.com>
Date:   Wed May 21 14:33:18 2025 -0400

    [automated] Set delta state

diff --git a/.aixcc/README.md b/.aixcc/README.md
new file mode 100644
index 00000000..13d35f16
--- /dev/null
+++ b/.aixcc/README.md
@@ -0,0 +1,16 @@
+# Zookeeper - Infinite Colon Problems
+
+This challenge is a very simple delta scan challenge.
+
+The challenge includes one synthetic vulnerability (vuln\_2) inside 
+improper iPv6 validation that leads to an infinite loop.
+
+The delta for this challenge contains the new iPv6 colon-counting functionality
+in full, as well as a set of two unit tests to test the new functionality.
+
+## Challenge Rounds
+
+This challenge has been included in the following set of rounds.
+
+* Exhibition Round 1
+* Exhibition Round 2
diff --git a/.aixcc/challenge.yaml b/.aixcc/challenge.yaml
new file mode 100644
index 00000000..4be5943e
--- /dev/null
+++ b/.aixcc/challenge.yaml
@@ -0,0 +1,32 @@
+metadata_spec_version: v1
+
+name: 'Zookeeper - Infinite Colon Problems'
+
+# fuzz_tooling project info that pairs to this challenge
+fuzz_tooling_project_name: 'zookeeper'
+fuzz_tooling_url: "https://github.com/aixcc-finals/oss-fuzz-aixcc.git"
+fuzz_tooling_ref: "challenge-state/zk-delta-01"
+
+challenge_type: delta     # full | delta
+
+base_ref: f6f34f6d5b6d67205c34de617a0b99fe11e3d323
+delta_ref: challenges/zk-delta-01
+
+# A list of the vulnerabilities included in this challenge
+# This should always match the dir names in .aixcc/vulns/*
+vulnerabilities:
+    - vuln_2
+
+sarif:
+    broadcast: false
+    target: null
+    correct: null
+
+# harness fuzz targets available for this challenge
+harnesses:
+    - 'DataTreeFuzzer'
+    - 'MessageTrackerPeekReceivedFuzzer'
+    - 'MultiProcessTxnFuzzer'
+    - 'ProcessTxnFuzzer'
+    - 'SerializeFuzzer'
+
diff --git a/.aixcc/delta.diff b/.aixcc/delta.diff
new file mode 100644
index 00000000..7ceb5a8d
--- /dev/null
+++ b/.aixcc/delta.diff
@@ -0,0 +1,95 @@
+diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java
+index a81a12baa..91952cad2 100644
+--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java
++++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java
+@@ -105,7 +105,9 @@ private static void logMessages(
+         CircularBuffer<BufferedMessage> messages,
+         Direction direction) {
+         String sentOrReceivedText = direction == Direction.SENT ? "sentBuffer to" : "receivedBuffer from";
+-
++        if (serverAddr.contains(":")) {
++            verifyIPv6(serverAddr);
++        }
+         if (messages.isEmpty()) {
+             LOG.info("No buffered timestamps for messages {} {}", sentOrReceivedText, serverAddr);
+         } else {
+@@ -116,6 +118,34 @@ private static void logMessages(
+         }
+     }
+ 
++    private static void verifyIPv6(String serverAddr) {
++        int maxColons = 8;
++        int cntColons = 0;
++        int i = serverAddr.indexOf(':');
++        while (i > -1 && i < serverAddr.length() && cntColons < maxColons) {
++            cntColons++;
++            i = serverAddr.indexOf(':', i + 1);
++        }
++        //is there an extra?
++        int extraColons = countExtraColons(i, serverAddr);
++        //count extras
++        if (cntColons > 0 && (cntColons < maxColons || extraColons == 0)) {
++            return;
++        }
++        throw new IllegalArgumentException("bad ipv6: " + serverAddr + " too many colons=" + extraColons);
++    }
++
++    private static int countExtraColons(int i, String serverAddr) {
++        if (i == -1) {
++            return 1;
++        }
++        int cnt = 1;
++        while (i > 0) {
++            cnt++;
++            i = serverAddr.indexOf(':');
++        }
++        return cnt;
++    }
+     /**
+      * Direction for message track.
+      */
+diff --git a/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java b/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java
+index d400cf993..9e1d6b378 100644
+--- a/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java
++++ b/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java
+@@ -20,6 +20,9 @@
+ 
+ import static org.junit.jupiter.api.Assertions.assertEquals;
+ import static org.junit.jupiter.api.Assertions.assertNull;
++import static org.junit.jupiter.api.Assertions.assertThrows;
++import static org.junit.jupiter.api.Assertions.assertTrue;
++
+ import org.junit.jupiter.api.AfterEach;
+ import org.junit.jupiter.api.BeforeEach;
+ import org.junit.jupiter.api.Test;
+@@ -127,4 +130,30 @@ public void testDumpToLog() {
+         assertNull(messageTracker.peekSent());
+         assertNull(messageTracker.peekReceived());
+     }
++
++    @Test
++    public void testIPv6VerificationGood() {
++        MessageTracker messageTracker = new MessageTracker(10);
++        //see https://www.ibm.com/docs/en/ts4500-tape-library?topic=functionality-ipv4-ipv6-address-formats
++        for (String serverAddr : new String[] {
++                "2001:db8:3333:4444:5555:6666:7777:8888",
++                "2001:db8:3333:4444:CCCC:DDDD:EEEE:FFFF",
++                "::", "2001:db8::", "2001:db8::1234:5678",
++                "2001:0db8:0001:0000:0000:0ab9:C0A8:0102"
++        }) {
++            messageTracker.dumpToLog(serverAddr);
++        }
++    }
++
++    @Test
++    public void testIPv6TooManyColons() {
++        final String serverAddr = "2001:db8:1234:0000:0000:0000:0000:0000:0000";
++        MessageTracker messageTracker = new MessageTracker(10);
++        IllegalArgumentException thrown = assertThrows(
++                IllegalArgumentException.class,
++                () -> messageTracker.dumpToLog(serverAddr),
++                "Expected dumpToLog to throw IllegalArgumentException, but it didn't"
++        );
++        assertTrue(thrown.getMessage().contains("too many colons=1"));
++    }
+ }
diff --git a/.aixcc/test.sh b/.aixcc/test.sh
new file mode 100755
index 00000000..a26cb171
--- /dev/null
+++ b/.aixcc/test.sh
@@ -0,0 +1,19 @@
+#!/bin/bash
+
+# This performs the repo-specific tests. It may be replaced with a script
+# or binary for a different interpreter. The name MUST NOT change.
+
+set -e
+set -o pipefail
+
+MAVEN_ARGS="-Dpropguard.skip -Dmaven.javadoc.skip=true -Dpmd.skip=true \
+  -Dencoding=UTF-8 -Dmaven.antrun.skip=true -Dcheckstyle.skip=true \
+  -Dsurefire.failIfNoSpecifiedTests=false"
+
+#We're tightly limiting the focus for the first three. ZooKeeperTest is
+#a proxy for the fuller end to end testing that we're limiting for this challenge.
+MAVEN_TESTS="-Dtest=DataTreeTest,DataNodeTest,DeserializationPerfTest,ZooKeeperTest,MessageTrackerTest"
+
+cd $SRC/zookeeper
+
+${MVN} ${MAVEN_ARGS} ${MAVEN_TESTS} -am -pl :zookeeper clean install --no-snapshot-updates
diff --git a/.aixcc/vulns/vuln_2/README.md b/.aixcc/vulns/vuln_2/README.md
new file mode 100644
index 00000000..db00cbe8
--- /dev/null
+++ b/.aixcc/vulns/vuln_2/README.md
@@ -0,0 +1,13 @@
+# Zookeeper (vuln\_2) Infinite loop in ipv6 validation
+
+This is a vulnerability in a logging utility in MessageTracker.java 
+that attempts to check the validation of an iPv6 formatted string,
+counting the number of colons and comparing them to a max value.
+
+The vulnerability itself is a failure to properly iterate over 
+values in the string. A simple infinite loop created by calling 
+String#indexOf without incrementing the last found index.
+
+Exploiting this vulnerability would allow someone to craft input
+that causes a Denial-of-Service (DoS), reducing the availability 
+of the zookeeper service.
diff --git a/.aixcc/vulns/vuln_2/blobs/data.bin b/.aixcc/vulns/vuln_2/blobs/data.bin
new file mode 100644
index 00000000..0e15e351
Binary files /dev/null and b/.aixcc/vulns/vuln_2/blobs/data.bin differ
diff --git a/.aixcc/vulns/vuln_2/patches/good_patch.diff b/.aixcc/vulns/vuln_2/patches/good_patch.diff
new file mode 100644
index 00000000..9fb5d7f1
--- /dev/null
+++ b/.aixcc/vulns/vuln_2/patches/good_patch.diff
@@ -0,0 +1,29 @@
+diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java
+index 91952cad..d8d235bb 100644
+--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java
++++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java
+@@ -119,19 +119,18 @@ private static void logMessages(
+     }
+ 
+     private static void verifyIPv6(String serverAddr) {
+-        int maxColons = 8;
++        int maxColons = 7;
+         int cntColons = 0;
+         int i = serverAddr.indexOf(':');
+-        while (i > -1 && i < serverAddr.length() && cntColons < maxColons) {
++        while (i > -1 && i < serverAddr.length()) {
+             cntColons++;
+             i = serverAddr.indexOf(':', i + 1);
+         }
+-        //is there an extra?
+-        int extraColons = countExtraColons(i, serverAddr);
+-        //count extras
+-        if (cntColons > 0 && (cntColons < maxColons || extraColons == 0)) {
++        if (cntColons > 0 && cntColons <= maxColons) {
+             return;
+         }
++        int extraColons = cntColons - maxColons;
++
+         throw new IllegalArgumentException("bad ipv6: " + serverAddr + " too many colons=" + extraColons);
+     }
+ 
diff --git a/.aixcc/vulns/vuln_2/vuln.yaml b/.aixcc/vulns/vuln_2/vuln.yaml
new file mode 100644
index 00000000..1d4284e0
--- /dev/null
+++ b/.aixcc/vulns/vuln_2/vuln.yaml
@@ -0,0 +1,29 @@
+metadata_spec_version: v1
+
+name: Infinite loop in ipv6 validation
+
+author: Tim Allison
+
+details:
+
+  cwes:
+    - CWE-835
+    - CWE-834
+
+  description: >
+    Infinite loop triggered by crafted ipv6 address.
+
+  locations:
+    - path_from_root: 'zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java'
+      startLine: 121
+      startColumn: 5
+      endLine: 148
+      endColumn: 6
+
+pov:
+  blob: 'data.bin'
+  harness: 'MessageTrackerPeekReceivedFuzzer'
+
+patch:
+  good: 'good_patch.diff'
+  bad: 'bad_patch.diff'
diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java
index a81a12ba..91952cad 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java
@@ -105,7 +105,9 @@ private static void logMessages(
         CircularBuffer<BufferedMessage> messages,
         Direction direction) {
         String sentOrReceivedText = direction == Direction.SENT ? "sentBuffer to" : "receivedBuffer from";
-
+        if (serverAddr.contains(":")) {
+            verifyIPv6(serverAddr);
+        }
         if (messages.isEmpty()) {
             LOG.info("No buffered timestamps for messages {} {}", sentOrReceivedText, serverAddr);
         } else {
@@ -116,6 +118,34 @@ private static void logMessages(
         }
     }
 
+    private static void verifyIPv6(String serverAddr) {
+        int maxColons = 8;
+        int cntColons = 0;
+        int i = serverAddr.indexOf(':');
+        while (i > -1 && i < serverAddr.length() && cntColons < maxColons) {
+            cntColons++;
+            i = serverAddr.indexOf(':', i + 1);
+        }
+        //is there an extra?
+        int extraColons = countExtraColons(i, serverAddr);
+        //count extras
+        if (cntColons > 0 && (cntColons < maxColons || extraColons == 0)) {
+            return;
+        }
+        throw new IllegalArgumentException("bad ipv6: " + serverAddr + " too many colons=" + extraColons);
+    }
+
+    private static int countExtraColons(int i, String serverAddr) {
+        if (i == -1) {
+            return 1;
+        }
+        int cnt = 1;
+        while (i > 0) {
+            cnt++;
+            i = serverAddr.indexOf(':');
+        }
+        return cnt;
+    }
     /**
      * Direction for message track.
      */
diff --git a/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java b/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java
index d400cf99..9e1d6b37 100644
--- a/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java
+++ b/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java
@@ -20,6 +20,9 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -127,4 +130,30 @@ public void testDumpToLog() {
         assertNull(messageTracker.peekSent());
         assertNull(messageTracker.peekReceived());
     }
+
+    @Test
+    public void testIPv6VerificationGood() {
+        MessageTracker messageTracker = new MessageTracker(10);
+        //see https://www.ibm.com/docs/en/ts4500-tape-library?topic=functionality-ipv4-ipv6-address-formats
+        for (String serverAddr : new String[] {
+                "2001:db8:3333:4444:5555:6666:7777:8888",
+                "2001:db8:3333:4444:CCCC:DDDD:EEEE:FFFF",
+                "::", "2001:db8::", "2001:db8::1234:5678",
+                "2001:0db8:0001:0000:0000:0ab9:C0A8:0102"
+        }) {
+            messageTracker.dumpToLog(serverAddr);
+        }
+    }
+
+    @Test
+    public void testIPv6TooManyColons() {
+        final String serverAddr = "2001:db8:1234:0000:0000:0000:0000:0000:0000";
+        MessageTracker messageTracker = new MessageTracker(10);
+        IllegalArgumentException thrown = assertThrows(
+                IllegalArgumentException.class,
+                () -> messageTracker.dumpToLog(serverAddr),
+                "Expected dumpToLog to throw IllegalArgumentException, but it didn't"
+        );
+        assertTrue(thrown.getMessage().contains("too many colons=1"));
+    }
 }
